/*
 * DO NOT EDIT THIS FILE - it is generated by Glade.
 */

#ifdef HAVE_CONFIG_H
#  include <config.h>
#endif

#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <string.h>
#include <stdio.h>

#include <bonobo.h>
#include <gnome.h>

#include "callbacks.h"
#include "interface.h"
#include "support.h"

#define GLADE_HOOKUP_OBJECT(component,widget,name) \
  g_object_set_data_full (G_OBJECT (component), name, \
    gtk_widget_ref (widget), (GDestroyNotify) gtk_widget_unref)

#define GLADE_HOOKUP_OBJECT_NO_REF(component,widget,name) \
  g_object_set_data (G_OBJECT (component), name, widget)

GtkWidget*
create_window (void)
{
  GtkWidget *window;
  GtkWidget *hbox1;
  GtkWidget *vbox1;
  GtkWidget *canvas;
  GtkWidget *vseparator1;
  GtkWidget *vbox2;
  GtkWidget *draw_pc;
  GtkWidget *draw_poli;
  GtkWidget *draw_points;
  GtkWidget *recursivo;
  GtkWidget *hbox2;
  GtkWidget *label1;
  GtkObject *ndraw_adj;
  GtkWidget *ndraw;
  GtkWidget *clear;
  GtkWidget *draw;
  GtkWidget *label2;

  window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
  gtk_window_set_title (GTK_WINDOW (window), _("B-Splines C2"));

  hbox1 = gtk_hbox_new (FALSE, 0);
  gtk_widget_show (hbox1);
  gtk_container_add (GTK_CONTAINER (window), hbox1);

  vbox1 = gtk_vbox_new (FALSE, 0);
  gtk_widget_show (vbox1);
  gtk_box_pack_start (GTK_BOX (hbox1), vbox1, TRUE, TRUE, 0);

  canvas = gtk_drawing_area_new ();
  gtk_widget_show (canvas);
  gtk_box_pack_start (GTK_BOX (vbox1), canvas, TRUE, TRUE, 0);
  gtk_widget_set_size_request (canvas, 640, 480);

  vseparator1 = gtk_vseparator_new ();
  gtk_widget_show (vseparator1);
  gtk_box_pack_start (GTK_BOX (hbox1), vseparator1, FALSE, TRUE, 6);

  vbox2 = gtk_vbox_new (FALSE, 0);
  gtk_widget_show (vbox2);
  gtk_box_pack_start (GTK_BOX (hbox1), vbox2, FALSE, TRUE, 0);

  draw_pc = gtk_check_button_new_with_mnemonic (_("Pontos de controle"));
  gtk_widget_show (draw_pc);
  gtk_box_pack_start (GTK_BOX (vbox2), draw_pc, FALSE, FALSE, 0);
  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (draw_pc), TRUE);

  draw_poli = gtk_check_button_new_with_mnemonic (_("Poligonal"));
  gtk_widget_show (draw_poli);
  gtk_box_pack_start (GTK_BOX (vbox2), draw_poli, FALSE, FALSE, 0);
  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (draw_poli), TRUE);

  draw_points = gtk_check_button_new_with_mnemonic (_("Pontos da Curva"));
  gtk_widget_show (draw_points);
  gtk_box_pack_start (GTK_BOX (vbox2), draw_points, FALSE, FALSE, 0);
  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (draw_points), TRUE);

  recursivo = gtk_check_button_new_with_mnemonic (_("Algoritmo Recursivo"));
  gtk_widget_show (recursivo);
  gtk_box_pack_start (GTK_BOX (vbox2), recursivo, FALSE, FALSE, 0);

  hbox2 = gtk_hbox_new (FALSE, 0);
  gtk_widget_show (hbox2);
  gtk_box_pack_start (GTK_BOX (vbox2), hbox2, FALSE, FALSE, 0);

  label1 = gtk_label_new (_("Avaliacoes"));
  gtk_widget_show (label1);
  gtk_box_pack_start (GTK_BOX (hbox2), label1, FALSE, FALSE, 0);
  gtk_label_set_justify (GTK_LABEL (label1), GTK_JUSTIFY_LEFT);

  ndraw_adj = gtk_adjustment_new (5, 1, 5000, 1, 10, 10);
  ndraw = gtk_spin_button_new (GTK_ADJUSTMENT (ndraw_adj), 1, 0);
  gtk_widget_show (ndraw);
  gtk_box_pack_start (GTK_BOX (hbox2), ndraw, TRUE, TRUE, 0);

  clear = gtk_button_new_from_stock ("gtk-clear");
  gtk_widget_show (clear);
  gtk_box_pack_start (GTK_BOX (vbox2), clear, FALSE, FALSE, 0);

  draw = gtk_button_new_from_stock ("gtk-execute");
  gtk_widget_show (draw);
  gtk_box_pack_start (GTK_BOX (vbox2), draw, FALSE, FALSE, 0);

  label2 = gtk_label_new (_("Insira quatro ou mais \npontos. Clique em \nexecutar para desenhar\na curva."));
  gtk_widget_show (label2);
  gtk_box_pack_start (GTK_BOX (vbox2), label2, FALSE, FALSE, 0);
  gtk_label_set_justify (GTK_LABEL (label2), GTK_JUSTIFY_LEFT);

  g_signal_connect ((gpointer) window, "destroy_event",
                    G_CALLBACK (on_window_destroy_event),
                    NULL);
  g_signal_connect ((gpointer) window, "destroy",
                    G_CALLBACK (on_window_destroy_event),
                    NULL);
  g_signal_connect ((gpointer) canvas, "button_press_event",
                    G_CALLBACK (on_canvas_button_press_event),
                    NULL);
  g_signal_connect ((gpointer) canvas, "configure_event",
                    G_CALLBACK (on_canvas_configure_event),
                    NULL);
  g_signal_connect ((gpointer) canvas, "expose_event",
                    G_CALLBACK (on_canvas_expose_event),
                    NULL);
  g_signal_connect ((gpointer) draw_pc, "toggled",
                    G_CALLBACK (on_draw_pc_toggled),
                    NULL);
  g_signal_connect ((gpointer) draw_poli, "toggled",
                    G_CALLBACK (on_draw_poli_toggled),
                    NULL);
  g_signal_connect ((gpointer) draw_points, "toggled",
                    G_CALLBACK (on_draw_points_toggled),
                    NULL);
  g_signal_connect ((gpointer) recursivo, "toggled",
                    G_CALLBACK (on_recursivo_toggled),
                    NULL);
  g_signal_connect ((gpointer) ndraw, "changed",
                    G_CALLBACK (on_ndraw_changed),
                    NULL);
  g_signal_connect_swapped ((gpointer) clear, "clicked",
                            G_CALLBACK (on_clear_clicked),
                            GTK_OBJECT (canvas));
  g_signal_connect_swapped ((gpointer) draw, "clicked",
                            G_CALLBACK (on_draw_clicked),
                            GTK_OBJECT (canvas));
  gtk_widget_set_events (canvas, GDK_EXPOSURE_MASK
                         | GDK_LEAVE_NOTIFY_MASK
                         | GDK_BUTTON_PRESS_MASK
                         | GDK_POINTER_MOTION_MASK
                         | GDK_POINTER_MOTION_HINT_MASK);
                                                                                                                                                             

  /* Store pointers to all widgets, for use by lookup_widget(). */
  GLADE_HOOKUP_OBJECT_NO_REF (window, window, "window");
  GLADE_HOOKUP_OBJECT (window, hbox1, "hbox1");
  GLADE_HOOKUP_OBJECT (window, vbox1, "vbox1");
  GLADE_HOOKUP_OBJECT (window, canvas, "canvas");
  GLADE_HOOKUP_OBJECT (window, vseparator1, "vseparator1");
  GLADE_HOOKUP_OBJECT (window, vbox2, "vbox2");
  GLADE_HOOKUP_OBJECT (window, draw_pc, "draw_pc");
  GLADE_HOOKUP_OBJECT (window, draw_poli, "draw_poli");
  GLADE_HOOKUP_OBJECT (window, draw_points, "draw_points");
  GLADE_HOOKUP_OBJECT (window, recursivo, "recursivo");
  GLADE_HOOKUP_OBJECT (window, hbox2, "hbox2");
  GLADE_HOOKUP_OBJECT (window, label1, "label1");
  GLADE_HOOKUP_OBJECT (window, ndraw, "ndraw");
  GLADE_HOOKUP_OBJECT (window, clear, "clear");
  GLADE_HOOKUP_OBJECT (window, draw, "draw");
  GLADE_HOOKUP_OBJECT (window, label2, "label2");

  return window;
}

